// A complete working C program to demonstrate all insertion methods 
// on Linked List 
#include <stdio.h> 
#include <stdlib.h> 

// A linked list node 
struct Node 
{ 
int data; 
struct Node *next; 
}; 

/* Given a reference (pointer to pointer) to the head of a list and 
an int, inserts a new node on the front of the list. */
void push(struct Node** head_ref, int new_data) 
{ 
	/* 1. allocate node */
	struct Node* new_node = (struct Node*) malloc(sizeof(struct Node)); 

	/* 2. put in the data */
	new_node->data = new_data; 

	/* 3. Make next of new node as head */
	new_node->next = *head_ref; 

	/* 4. move the head to point to the new node */
	*head_ref = new_node; 
} 

void insertafter(struct Node* prev_node,int data)
{
  struct Node *tmp;    
  struct Node* new_node = (struct Node *)malloc(sizeof(struct Node));
   new_node->data = data;
   
   tmp = prev_node->next ; 
   prev_node->next = new_node;
   new_node->next = tmp;
   return;
}

void insertbefore(struct Node* node,int data)
{
    struct Node *tmp,*bf;
    struct Node* new_node = (struct Node *)malloc(sizeof(struct Node));
    new_node->data = data;
    while(tmp!=node)
    { 
      tmp = tmp->next;        
    }
    bf = tmp->next;
    tmp->next = new_node;
    new_node->next = bf;
}
void printList(struct Node *node) 
{ 
while (node != NULL) 
{ 
	printf(" %d ", node->data); 
	node = node->next; 
} 
} 

/* Driver program to test above functions*/
int main() 
{ 
/* Start with the empty list */
struct Node* head = NULL; 


push(&head, 7); 

// Insert 1 at the beginning. So linked list becomes 1->7->6->NULL 
push(&head, 1); 

insertafter(head->next, 8);
insertbefore(head->next,10);

printf("\n Created Linked list is: "); 
printList(head); 

return 0; 
} 

